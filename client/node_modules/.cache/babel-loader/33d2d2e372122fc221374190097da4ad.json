{"ast":null,"code":"const punycode = require('punycode');\n\nconst sldMap = require('./data/sldMap.json');\n\nconst ccTldMap = require('./data/ccTldMap.json');\n\nmodule.exports = function isValidDomain(value, opts) {\n  if (typeof value !== 'string') return false;\n  if (!(opts instanceof Object)) opts = {};\n  value = value.toLowerCase();\n\n  if (value.endsWith('.')) {\n    value = value.slice(0, value.length - 1);\n  }\n\n  if (opts.allowUnicode) {\n    value = punycode.toASCII(value);\n  }\n\n  if (value.length > 253) {\n    return false;\n  }\n\n  const validChars = /^([a-z0-9-._*]+)$/g;\n\n  if (!validChars.test(value)) {\n    return false;\n  }\n\n  if (opts.topLevel) {\n    if (ccTldMap[value.replace(/\\.$/, '')]) {\n      return true;\n    }\n  }\n\n  const sldRegex = /(.*)\\.(([a-z0-9]+)(\\.[a-z0-9]+))/;\n  const matches = value.match(sldRegex);\n  var tld = null;\n  var labels = null;\n\n  if (matches && matches.length > 2) {\n    if (sldMap[matches[2]]) {\n      tld = matches[2];\n      labels = matches[1].split('.');\n    }\n  }\n\n  if (!labels) {\n    labels = value.split('.');\n    if (labels.length <= 1) return false;\n    tld = labels.pop();\n    const tldRegex = /^(?:xn--)?(?!^\\d+$)[a-z0-9]+$/gi;\n    if (!tldRegex.test(tld)) return false;\n  }\n\n  if (opts.subdomain === false && labels.length > 1) return false;\n  const isValid = labels.every(function (label, index) {\n    if (opts.wildcard && index === 0 && label === '*' && labels.length > 1) {\n      return true;\n    }\n\n    let validLabelChars = /^([a-zA-Z0-9-_]+)$/g;\n\n    if (index === labels.length - 1) {\n      validLabelChars = /^([a-zA-Z0-9-]+)$/g;\n    }\n\n    const doubleDashCount = (label.match(/--/g) || []).length;\n    const xnDashCount = (label.match(/xn--/g) || []).length;\n\n    if (doubleDashCount !== xnDashCount) {\n      return false;\n    }\n\n    const isValid = validLabelChars.test(label) && label.length < 64 && !label.startsWith('-') && !label.endsWith('-');\n    return isValid;\n  });\n  return isValid;\n};","map":{"version":3,"sources":["/Users/md.pappumiahn/Documents/Dev/link_shorten/client/node_modules/is-valid-domain/index.js"],"names":["punycode","require","sldMap","ccTldMap","module","exports","isValidDomain","value","opts","Object","toLowerCase","endsWith","slice","length","allowUnicode","toASCII","validChars","test","topLevel","replace","sldRegex","matches","match","tld","labels","split","pop","tldRegex","subdomain","isValid","every","label","index","wildcard","validLabelChars","doubleDashCount","xnDashCount","startsWith"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,sBAAD,CAAxB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAqC;AACpD,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAP;AAC/B,MAAI,EAAEC,IAAI,YAAYC,MAAlB,CAAJ,EAA+BD,IAAI,GAAG,EAAP;AAC/BD,EAAAA,KAAK,GAAGA,KAAK,CAACG,WAAN,EAAR;;AAEA,MAAIH,KAAK,CAACI,QAAN,CAAe,GAAf,CAAJ,EAAyB;AACvBJ,IAAAA,KAAK,GAAGA,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeL,KAAK,CAACM,MAAN,GAAe,CAA9B,CAAR;AACD;;AAED,MAAIL,IAAI,CAACM,YAAT,EAAuB;AACrBP,IAAAA,KAAK,GAAGP,QAAQ,CAACe,OAAT,CAAiBR,KAAjB,CAAR;AACD;;AAED,MAAIA,KAAK,CAACM,MAAN,GAAe,GAAnB,EAAwB;AACtB,WAAO,KAAP;AACD;;AAED,QAAMG,UAAU,GAAG,oBAAnB;;AACA,MAAI,CAACA,UAAU,CAACC,IAAX,CAAgBV,KAAhB,CAAL,EAA6B;AAC3B,WAAO,KAAP;AACD;;AAED,MAAIC,IAAI,CAACU,QAAT,EAAmB;AACjB,QAAIf,QAAQ,CAACI,KAAK,CAACY,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAD,CAAZ,EAAwC;AACtC,aAAO,IAAP;AACD;AACF;;AAED,QAAMC,QAAQ,GAAG,kCAAjB;AACA,QAAMC,OAAO,GAAGd,KAAK,CAACe,KAAN,CAAYF,QAAZ,CAAhB;AACA,MAAIG,GAAG,GAAG,IAAV;AACA,MAAIC,MAAM,GAAG,IAAb;;AACA,MAAIH,OAAO,IAAIA,OAAO,CAACR,MAAR,GAAiB,CAAhC,EAAmC;AACjC,QAAIX,MAAM,CAACmB,OAAO,CAAC,CAAD,CAAR,CAAV,EAAwB;AACtBE,MAAAA,GAAG,GAAGF,OAAO,CAAC,CAAD,CAAb;AACAG,MAAAA,MAAM,GAAGH,OAAO,CAAC,CAAD,CAAP,CAAWI,KAAX,CAAiB,GAAjB,CAAT;AACD;AACF;;AAED,MAAI,CAACD,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAGjB,KAAK,CAACkB,KAAN,CAAY,GAAZ,CAAT;AACA,QAAID,MAAM,CAACX,MAAP,IAAiB,CAArB,EAAwB,OAAO,KAAP;AAExBU,IAAAA,GAAG,GAAGC,MAAM,CAACE,GAAP,EAAN;AACA,UAAMC,QAAQ,GAAG,iCAAjB;AAEA,QAAI,CAACA,QAAQ,CAACV,IAAT,CAAcM,GAAd,CAAL,EAAyB,OAAO,KAAP;AAC1B;;AAED,MAAIf,IAAI,CAACoB,SAAL,KAAmB,KAAnB,IAA4BJ,MAAM,CAACX,MAAP,GAAgB,CAAhD,EAAmD,OAAO,KAAP;AAEnD,QAAMgB,OAAO,GAAGL,MAAM,CAACM,KAAP,CAAa,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AACnD,QAAIxB,IAAI,CAACyB,QAAL,IAAiBD,KAAK,KAAK,CAA3B,IAAgCD,KAAK,KAAK,GAA1C,IAAiDP,MAAM,CAACX,MAAP,GAAgB,CAArE,EAAwE;AACtE,aAAO,IAAP;AACD;;AAED,QAAIqB,eAAe,GAAG,qBAAtB;;AACA,QAAIF,KAAK,KAAKR,MAAM,CAACX,MAAP,GAAgB,CAA9B,EAAiC;AAC/BqB,MAAAA,eAAe,GAAG,oBAAlB;AACD;;AAED,UAAMC,eAAe,GAAG,CAACJ,KAAK,CAACT,KAAN,CAAY,KAAZ,KAAsB,EAAvB,EAA2BT,MAAnD;AACA,UAAMuB,WAAW,GAAG,CAACL,KAAK,CAACT,KAAN,CAAY,OAAZ,KAAwB,EAAzB,EAA6BT,MAAjD;;AACA,QAAIsB,eAAe,KAAKC,WAAxB,EAAqC;AACnC,aAAO,KAAP;AACD;;AAED,UAAMP,OAAO,GACXK,eAAe,CAACjB,IAAhB,CAAqBc,KAArB,KACAA,KAAK,CAAClB,MAAN,GAAe,EADf,IAEA,CAACkB,KAAK,CAACM,UAAN,CAAiB,GAAjB,CAFD,IAGA,CAACN,KAAK,CAACpB,QAAN,CAAe,GAAf,CAJH;AAOA,WAAOkB,OAAP;AACD,GAxBe,CAAhB;AA0BA,SAAOA,OAAP;AACD,CA9ED","sourcesContent":["const punycode = require('punycode')\nconst sldMap = require('./data/sldMap.json')\nconst ccTldMap = require('./data/ccTldMap.json')\n\nmodule.exports = function isValidDomain (value, opts) {\n  if (typeof value !== 'string') return false\n  if (!(opts instanceof Object)) opts = {}\n  value = value.toLowerCase()\n\n  if (value.endsWith('.')) {\n    value = value.slice(0, value.length - 1)\n  }\n\n  if (opts.allowUnicode) {\n    value = punycode.toASCII(value)\n  }\n\n  if (value.length > 253) {\n    return false\n  }\n\n  const validChars = /^([a-z0-9-._*]+)$/g\n  if (!validChars.test(value)) {\n    return false\n  }\n\n  if (opts.topLevel) {\n    if (ccTldMap[value.replace(/\\.$/, '')]) {\n      return true\n    }\n  }\n\n  const sldRegex = /(.*)\\.(([a-z0-9]+)(\\.[a-z0-9]+))/\n  const matches = value.match(sldRegex)\n  var tld = null\n  var labels = null\n  if (matches && matches.length > 2) {\n    if (sldMap[matches[2]]) {\n      tld = matches[2]\n      labels = matches[1].split('.')\n    }\n  }\n\n  if (!labels) {\n    labels = value.split('.')\n    if (labels.length <= 1) return false\n\n    tld = labels.pop()\n    const tldRegex = /^(?:xn--)?(?!^\\d+$)[a-z0-9]+$/gi\n\n    if (!tldRegex.test(tld)) return false\n  }\n\n  if (opts.subdomain === false && labels.length > 1) return false\n\n  const isValid = labels.every(function (label, index) {\n    if (opts.wildcard && index === 0 && label === '*' && labels.length > 1) {\n      return true\n    }\n\n    let validLabelChars = /^([a-zA-Z0-9-_]+)$/g\n    if (index === labels.length - 1) {\n      validLabelChars = /^([a-zA-Z0-9-]+)$/g\n    }\n\n    const doubleDashCount = (label.match(/--/g) || []).length\n    const xnDashCount = (label.match(/xn--/g) || []).length\n    if (doubleDashCount !== xnDashCount) {\n      return false\n    }\n\n    const isValid = (\n      validLabelChars.test(label) &&\n      label.length < 64 &&\n      !label.startsWith('-') &&\n      !label.endsWith('-')\n    )\n\n    return isValid\n  })\n\n  return isValid\n}\n"]},"metadata":{},"sourceType":"script"}